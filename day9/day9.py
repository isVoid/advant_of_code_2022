from input_util import parse_as_list_of_lines, read_demo, read_input

day = "day9"

hloc_dirs = {"R": (1, 0), "L": (-1, 0), "D": (0, -1), "U": (0, 1)}

"""
0 1 2
3 4 5
6 7 8
"""
transition = {
    0: {
        (0, 0): (0, (0, 0)),
        (1, 0): (3, (1, -1)),
        (-1, 0): (1, (0, 0)),
        (0, -1): (1, (1, -1)),
        (0, 1): (3, (0, 0)),
        (1, 1): (1, (1, 0)),
        (-1, 1): (4, (0, 0)),
        (1, -1): (0, (1, -1)),
        (-1, -1): (1, (0, -1)),
    },
    1: {
        (0, 0): (1, (0, 0)),
        (1, 0): (0, (0, 0)),
        (-1, 0): (2, (0, 0)),
        (0, -1): (1, (0, -1)),
        (0, 1): (4, (0, 0)),
        (1, 1): (3, (0, 0)),
        (-1, 1): (5, (0, 0)),
        (1, -1): (1, (1, -1)),
        (-1, -1): (1, (-1, -1)),
    },
    2: {
        (0, 0): (2, (0, 0)),
        (1, 0): (1, (0, 0)),
        (-1, 0): (5, (-1, -1)),
        (0, -1): (1, (-1, -1)),
        (0, 1): (5, (0, 0)),
        (1, 1): (4, (0, 0)),
        (-1, 1): (5, (-1, 0)),
        (1, -1): (1, (0, -1)),
        (-1, -1): (2, (-1, -1)),
    },
    3: {
        (0, 0): (3, (0, 0)),
        (1, 0): (3, (1, 0)),
        (-1, 0): (4, (0, 0)),
        (0, -1): (0, (0, 0)),
        (0, 1): (6, (0, 0)),
        (1, 1): (3, (1, 1)),
        (-1, 1): (7, (0, 0)),
        (1, -1): (3, (1, -1)),
        (-1, -1): (1, (0, 0)),
    },
    4: {
        (0, 0): (4, (0, 0)),
        (1, 0): (3, (0, 0)),
        (-1, 0): (5, (0, 0)),
        (0, -1): (1, (0, 0)),
        (0, 1): (7, (0, 0)),
        (1, 1): (6, (0, 0)),
        (-1, 1): (8, (0, 0)),
        (1, -1): (0, (0, 0)),
        (-1, -1): (2, (0, 0)),
    },
    5: {
        (0, 0): (5, (0, 0)),
        (1, 0): (4, (0, 0)),
        (-1, 0): (5, (-1, 0)),
        (0, -1): (2, (0, 0)),
        (0, 1): (8, (0, 0)),
        (1, 1): (7, (0, 0)),
        (-1, 1): (5, (-1, 1)),
        (1, -1): (1, (0, 0)),
        (-1, -1): (5, (-1, -1)),
    },
    6: {
        (0, 0): (6, (0, 0)),
        (1, 0): (3, (1, 1)),
        (-1, 0): (7, (0, 0)),
        (0, -1): (3, (0, 0)),
        (0, 1): (7, (1, 1)),
        (1, 1): (6, (1, 1)),
        (-1, 1): (7, (0, 1)),
        (1, -1): (3, (1, 0)),
        (-1, -1): (4, (0, 0)),
    },
    7: {
        (0, 0): (7, (0, 0)),
        (1, 0): (6, (0, 0)),
        (-1, 0): (8, (0, 0)),
        (0, -1): (4, (0, 0)),
        (0, 1): (7, (0, 1)),
        (1, 1): (7, (1, 1)),
        (-1, 1): (7, (-1, 1)),
        (1, -1): (3, (0, 0)),
        (-1, -1): (5, (0, 0)),
    },
    8: {
        (0, 0): (8, (0, 0)),
        (1, 0): (7, (0, 0)),
        (-1, 0): (5, (-1, 1)),
        (0, -1): (5, (0, 0)),
        (0, 1): (7, (-1, 1)),
        (1, 1): (7, (0, 1)),
        (-1, 1): (8, (-1, 1)),
        (1, -1): (4, (0, 0)),
        (-1, -1): (5, (-1, 0)),
    },
}


def add(t1, t2):
    return (t1[0] + t2[0], t1[1] + t2[1])


def plot(coords):
    minx = min(x for x, y in coords) - 5
    maxx = max(x for x, y in coords) + 5
    miny = min(y for x, y in coords) - 5
    maxy = max(y for x, y in coords) + 5

    for y in range(maxy, miny - 1, -1):
        for x in range(minx, maxx + 1):
            if (x, y) in coords:
                print("#", end="")
            else:
                print(".", end="")
        print()


def main(use_demo=False):
    if use_demo:
        t = read_demo(day, skip_strip=True)
    else:
        t = read_input(day, skip_strip=True)

    cmds = parse_as_list_of_lines(t)

    tlocs = set()
    hlocs = [(0, 0)] * 10
    states = [4] * 10

    for cmd in cmds:
        d, n = cmd.split()
        init_d = hloc_dirs[d]
        n = int(n)
        while n != 0:
            d = init_d
            hlocs[0] = add(hlocs[0], d)
            for i in range(1, 10):
                states[i], d = transition[states[i]][d]
                hlocs[i] = add(hlocs[i], d)
            tlocs.add(hlocs[-1])
            d = init_d
            if cmd == "R 17":
                plot(hlocs)
                print(states)
                print(hlocs)
                print()
            n -= 1
        # print(hlocs)
        if cmd == "R 17":
            plot(hlocs)
            print()
    # plot(tlocs)
    print(len(tlocs), tlocs)
